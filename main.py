#!/usr/bin/env python3
"""
Servidor de Herramientas MCP para la ECI

Este m√≥dulo crea un servidor MCP con herramientas para consultar informaci√≥n
sobre los cursos de la Escuela Complutense de Inform√°tica (ECI) 2025
y las expone a trav√©s de la interfaz HTTP de streaming de FastMCP en localhost:8080/mcp
"""

import asyncio
from typing import Any, Literal
from fastmcp import FastMCP
from pydantic import BaseModel
import uvicorn


# Datos de los cursos ECI 2025
CURSOS_ECI_2025 = {
    "M1": {
        "titulo": "An√°lisis Probabil√≠stico de Algoritmos",
        "instructor": "Pablo Rotondo",
        "horario": "Ma√±ana (9 a 12 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso sobre an√°lisis probabil√≠stico de algoritmos destinado a estudiantes y profesionales de carreras inform√°ticas."
    },
    "M2": {
        "titulo": "The Evolution of Blockchain Technologies",
        "instructor": "Andrea Vitaletti",
        "horario": "Ma√±ana (9 a 12 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso sobre la evoluci√≥n de las tecnolog√≠as blockchain y sus aplicaciones."
    },
    "M3": {
        "titulo": "Modelos generativos de im√°genes basados en redes profundas",
        "instructor": "Pablo Mus√©",
        "horario": "Ma√±ana (9 a 12 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso sobre modelos generativos para crear im√°genes usando redes neuronales profundas."
    },
    "T1": {
        "titulo": "Interactive theorem provers: theory and practice",
        "instructor": "Paige Randall North",
        "horario": "Tarde (13:30 a 16:30 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso sobre demostradores de teoremas interactivos, teor√≠a y pr√°ctica."
    },
    "T2": {
        "titulo": "Introducci√≥n a la computaci√≥n cu√°ntica",
        "instructor": "Rolando Somma",
        "horario": "Tarde (13:30 a 16:30 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso introductorio a los conceptos fundamentales de la computaci√≥n cu√°ntica."
    },
    "T3": {
        "titulo": "Procesamiento de im√°genes con aplicaci√≥n a la biomedicina",
        "instructor": "Federico Lecumberry",
        "horario": "Tarde (13:30 a 16:30 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso sobre t√©cnicas de procesamiento de im√°genes aplicadas al campo biom√©dico."
    },
    "N1": {
        "titulo": "Introduction to Column Generation and VRPSolver",
        "instructor": "Teobaldo Bulh√µes",
        "horario": "Noche (18 a 21 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso sobre generaci√≥n de columnas y el solver VRP para problemas de optimizaci√≥n."
    },
    "N2": {
        "titulo": "De la planificaci√≥n no determinista a la s√≠ntesis y planificaci√≥n generalizada",
        "instructor": "Sebasti√°n Sardina",
        "horario": "Noche (18 a 21 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso sobre planificaci√≥n no determinista y t√©cnicas de s√≠ntesis en inteligencia artificial."
    },
    "N3": {
        "titulo": "AI for Immersive Technologies: Enhancing Virtual and Augmented Realities",
        "instructor": "Francesco Strada",
        "horario": "Noche (18 a 21 hs)",
        "periodo": "del lunes 28 de julio al viernes 1 de agosto",
        "descripcion": "Curso sobre inteligencia artificial aplicada a tecnolog√≠as inmersivas, realidad virtual y aumentada."
    }
}


# Crear instancia del servidor FastMCP
mcp = FastMCP("herramientas-eci-mcp")


@mcp.tool
def listar_cursos_eci() -> str:
    """Listar todos los cursos disponibles en la ECI 2025."""
    resultado = "üìö CURSOS ECI 2025\n"
    resultado += "=" * 50 + "\n"
    resultado += "Per√≠odo: del lunes 28 de julio al viernes 1 de agosto\n"
    resultado += "Destinados a estudiantes y profesionales de carreras inform√°ticas y afines.\n\n"
    
    # Agrupar por horario
    horarios = {}
    for codigo, curso in CURSOS_ECI_2025.items():
        horario = curso["horario"]
        if horario not in horarios:
            horarios[horario] = []
        horarios[horario].append((codigo, curso))
    
    for horario, cursos in horarios.items():
        resultado += f"üïê {horario}\n"
        resultado += "-" * 30 + "\n"
        for codigo, curso in cursos:
            resultado += f"‚Ä¢ {curso['titulo']} ({codigo})\n"
            resultado += f"  Instructor: {curso['instructor']}\n\n"
    
    resultado += "üí° Usa 'obtener_detalle_curso' con el c√≥digo para m√°s informaci√≥n sobre un curso espec√≠fico."
    return resultado


@mcp.tool
def obtener_detalle_curso(codigo_curso: str) -> str:
    """Obtener detalles espec√≠ficos de un curso de la ECI 2025."""
    if codigo_curso not in CURSOS_ECI_2025:
        cursos_disponibles = ", ".join(CURSOS_ECI_2025.keys())
        return f"Error: Curso '{codigo_curso}' no encontrado.\n\nCursos disponibles: {cursos_disponibles}"
    
    curso = CURSOS_ECI_2025[codigo_curso]
    resultado = f"üìñ DETALLE DEL CURSO\n"
    resultado += "=" * 40 + "\n"
    resultado += f"T√≠tulo: {curso['titulo']} ({codigo_curso})\n"
    resultado += f"Instructor: {curso['instructor']}\n"
    resultado += f"Horario: {curso['horario']}\n"
    resultado += f"Per√≠odo: {curso['periodo']}\n\n"
    resultado += f"Descripci√≥n:\n{curso['descripcion']}\n\n"
    resultado += "üìç M√°s informaci√≥n: https://eci.dc.uba.ar/cursos-eci/"
    
    return resultado


async def main():
    """Funci√≥n principal para ejecutar el servidor."""
    print("üöÄ Iniciando Servidor de Herramientas MCP para la ECI")
    print("üì° El servidor estar√° disponible en: http://localhost:8080/mcp")
    print("üõ†Ô∏è  Herramientas disponibles:")
    print("   ‚Ä¢ listar_cursos_eci: Lista todos los cursos ECI 2025")
    print("   ‚Ä¢ obtener_detalle_curso: Obtiene detalles de un curso espec√≠fico")
    print("‚èπÔ∏è  Presiona Ctrl+C para detener el servidor")
    
    # Ejecutar el servidor usando HTTP de streaming
    await mcp.run_http_async(
        host="localhost",
        port=8080,
        path="/mcp"
    )


if __name__ == "__main__":
    asyncio.run(main())
